[{"C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\index.js":"1","C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\App.js":"2","C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\Context\\NotesContext.js":"3","C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\Context\\CurrentNote.js":"4","C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\Components\\NoteInfo.jsx":"5","C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\Components\\NotesList.jsx":"6","C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\Components\\AddNote.jsx":"7","C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\Components\\Note.jsx":"8"},{"size":220,"mtime":1607154005871,"results":"9","hashOfConfig":"10"},{"size":904,"mtime":1607155222542,"results":"11","hashOfConfig":"10"},{"size":82,"mtime":1607154251923,"results":"12","hashOfConfig":"10"},{"size":81,"mtime":1607154248638,"results":"13","hashOfConfig":"10"},{"size":2814,"mtime":1623190672724,"results":"14","hashOfConfig":"10"},{"size":815,"mtime":1623190702582,"results":"15","hashOfConfig":"10"},{"size":2135,"mtime":1623193991185,"results":"16","hashOfConfig":"10"},{"size":572,"mtime":1611809143626,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1kcb5pj",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"20"},"C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\index.js",[],["39","40"],"C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\App.js",[],"C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\Context\\NotesContext.js",[],"C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\Context\\CurrentNote.js",[],"C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\Components\\NoteInfo.jsx",["41"],"import React,{useContext,useEffect,useRef, useState} from 'react'\r\nimport {NotesContext} from '../Context/NotesContext'\r\nimport {CurrentNote} from '../Context/CurrentNote'\r\nimport {useParams,Link,Redirect} from 'react-router-dom'\r\nimport ReactModal from 'react-modal';\r\n\r\nconst LOCAL_STORAGE_KEY = 'myAppData'\r\n\r\nexport default function NoteInfo() {\r\n    const [notes,setNotes] = useContext(NotesContext)\r\n    const [currentNote,setCurrentNote] = useContext(CurrentNote)\r\n    const [confirmDelete,setConfirmDelete] = useState(false);\r\n    const updateRef = useRef()\r\n    const [redirect,setRedirect] = useState(false)\r\n    const {noteName} = useParams()\r\n\r\n\r\n    useEffect(() => {\r\n        const storage = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\r\n        if(storage) setNotes(storage)\r\n        const note = storage.find(note => note.name === noteName)\r\n        setCurrentNote(note)\r\n    },[])\r\n\r\n    \r\n    useEffect(() => {\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(notes))\r\n    },[notes])\r\n\r\n\r\n\r\n    function updateNote(id){\r\n        const newNotes = [...notes]\r\n        const selectNote = newNotes.find(note => note.id === id)\r\n        selectNote.text = updateRef.current.value;\r\n        setNotes(newNotes)\r\n    }\r\n\r\n    function deleteNote(id){\r\n        const newNotes = [...notes]\r\n        const modifiedNotes = newNotes.filter(note => note.id !== id)\r\n        setNotes(modifiedNotes)\r\n    }\r\n    \r\n    function handleUpdate(){\r\n        updateNote(currentNote.id)\r\n    }\r\n\r\n    function handleDelete(){\r\n        deleteNote(currentNote.id)\r\n        setRedirect(true)\r\n    }\r\n\r\n    function redirectDelete(){\r\n        if(redirect){\r\n            return <Redirect to=\"/\" />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"deleteBtn\" onClick={() => setConfirmDelete(true)}>Delete Note</div>\r\n        {redirectDelete()}\r\n        <ReactModal\r\n        isOpen={confirmDelete}\r\n        className=\"modal\"\r\n        ariaHideApp={false}\r\n        >\r\n                <div className=\"confirm-delete\">\r\n                    <h1>Are you sure you want to delete this note?</h1>\r\n                    <div className=\"choices\">\r\n                        <div className=\"confirmBtn\" onClick={handleDelete}>Yes</div>\r\n                        <div className=\"rejectBtn\" onClick={() => setConfirmDelete(false)}>No</div>\r\n                    </div>\r\n                </div>\r\n        </ReactModal>  \r\n        <div className=\"note-info\">\r\n            <div className=\"noteInfoTitle\">\r\n            <Link to=\"/\" className=\"backBtn\">Back</Link>\r\n            <h1>{currentNote.name}</h1>\r\n            </div>\r\n            <textarea ref={updateRef} name=\"content\" id=\"updateContent\" spellCheck=\"false\" value={currentNote.text} onChange={handleUpdate} />\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\Components\\NotesList.jsx",["42","43"],"import React,{useState, useEffect, useContext} from 'react'\r\nimport Note from './Note'\r\nimport AddNote from './AddNote'\r\nimport { NotesContext } from '../Context/NotesContext'\r\n\r\nconst LOCAL_STORAGE_KEY = 'myAppData'\r\n\r\n\r\nexport default function NotesList() {\r\n    const [notes,setNotes] = useContext(NotesContext);\r\n    \r\n\r\n\r\nuseEffect(() => {\r\n    const storage = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\r\n    if(storage) setNotes(storage)\r\n},[])\r\n\r\nuseEffect(() => {\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(notes))\r\n},[notes])\r\n\r\n\r\n    return (\r\n        <>\r\n            <AddNote />\r\n            <div className=\"notesList\">\r\n                {notes.map(note => (\r\n                    <Note key={note.id} note={note}/>\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\Components\\AddNote.jsx",["44"],"import React,{useState,useContext,useRef} from 'react'\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport {NotesContext}from '../Context/NotesContext'\r\nimport ReactModal from 'react-modal';\r\n\r\n\r\nexport default function AddNote() {\r\n    const [notes,setNotes] = useContext(NotesContext)\r\n    const [isAdding,setIsAdding] = useState(false)\r\n    const[title,setTitle] = useState('')\r\n    const [content,setContent] = useState('')\r\n    const titleRef = useRef();\r\n    const textRef = useRef();\r\n\r\nfunction toggleModal(){\r\n    setIsAdding(!isAdding)\r\n}\r\nfunction handleCancel(){\r\n    setTitle('')\r\n    setContent('')\r\n    setIsAdding(false)\r\n}\r\n\r\nfunction updateTitle(){\r\n    const input = titleRef.current.value\r\n    setTitle(input);\r\n}\r\nfunction updateContent(){\r\n    const input = textRef.current.value\r\n    setContent(input)\r\n}\r\nfunction addNote(){\r\n    const notesCopy = [...notes]\r\n    if(content === '' || title === '') return null\r\n    if(titleRef.current.value.length > 22){\r\n        alert('Title can be no longer than 22 characters.')\r\n        return null\r\n    }\r\n    setNotes([...notesCopy,{id:uuidv4(),name:title,text:content}])\r\n    setContent('')\r\n    setTitle('')\r\n}\r\n\r\n    if(isAdding) return(\r\n        <>\r\n        <ReactModal \r\n        className=\"modal\"\r\n        isOpen={isAdding}\r\n        >\r\n        <div className=\"addingNote\">\r\n        <p>Max Length = 22 <strong>|</strong> Length - {title.length}</p>\r\n        <input ref={titleRef} type=\"text\" name=\"title\" placeholder=\"Title\" value={title} spellCheck='false' autoComplete='off' onChange={updateTitle}/>\r\n        <textarea ref={textRef} name=\"text\" id=\"addContent\" placeholder=\"Write a note...\" spellCheck=\"false\" value={content} onChange={updateContent}></textarea>\r\n        <div className=\"options\">\r\n            <div className=\"cancelBtn\" onClick={toggleModal}>x</div>\r\n            <div className=\"addNote\" onClick={addNote}>Create Note</div>\r\n        </div>\r\n        </div>\r\n        </ReactModal>\r\n        </>\r\n    )\r\n\r\n    return (\r\n        <div className=\"addBtnContainer\">\r\n            <div id=\"addBtn\"onClick={toggleModal}>New Note...</div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Kenny\\Documents\\Coding\\notes-journal\\src\\Components\\Note.jsx",["45","46"],"import React,{useContext} from 'react'\r\nimport {NotesContext} from '../Context/NotesContext'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\n\r\nexport default function Note({note}) {\r\n    const [notes,setNotes] = useContext(NotesContext)\r\n\r\n    return (\r\n        <>\r\n        <div className=\"note\">\r\n        <Link className=\"note-link\" to={`/${note.name}`}> \r\n        <div className=\"note-card\">\r\n            <p className=\"preview-text\">{note.text}</p>\r\n        </div>\r\n        <h1 className=\"title\">{note.name}</h1>\r\n        </Link>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":23,"column":7,"nodeType":"53","endLine":23,"endColumn":9,"suggestions":"54"},{"ruleId":"55","severity":1,"message":"56","line":1,"column":15,"nodeType":"57","messageId":"58","endLine":1,"endColumn":23},{"ruleId":"51","severity":1,"message":"59","line":17,"column":3,"nodeType":"53","endLine":17,"endColumn":5,"suggestions":"60"},{"ruleId":"55","severity":1,"message":"61","line":18,"column":10,"nodeType":"57","messageId":"58","endLine":18,"endColumn":22},{"ruleId":"55","severity":1,"message":"62","line":8,"column":12,"nodeType":"57","messageId":"58","endLine":8,"endColumn":17},{"ruleId":"55","severity":1,"message":"63","line":8,"column":18,"nodeType":"57","messageId":"58","endLine":8,"endColumn":26},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'noteName', 'setCurrentNote', and 'setNotes'. Either include them or remove the dependency array.","ArrayExpression",["66"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'setNotes'. Either include it or remove the dependency array.",["67"],"'handleCancel' is defined but never used.","'notes' is assigned a value but never used.","'setNotes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},"Update the dependencies array to be: [noteName, setCurrentNote, setNotes]",{"range":"72","text":"73"},"Update the dependencies array to be: [setNotes]",{"range":"74","text":"75"},[901,903],"[noteName, setCurrentNote, setNotes]",[456,458],"[setNotes]"]